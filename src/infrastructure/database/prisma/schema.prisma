generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("USER_DB_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password_hash   String
  username        String?   @unique
  first_name      String?
  last_name       String?
  date_of_birth   DateTime?
  age             Int?
  role            String    @default("user") // user, user_minor
  account_status  String    @default("pending_verification")
  is_verified     Boolean   @default(false)
  email_verified_at DateTime?
  avatar_url      String?
  timezone        String    @default("America/Mexico_City")
  language        String    @default("es")
  last_login_at   DateTime?
  login_count     Int       @default(0)
  
  // Campos de auditoría
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
  created_by      String?
  updated_by      String?

  // Relaciones
  sessions        UserSession[]
  parental_consents ParentalConsent[]
  password_resets PasswordReset[]
  oauth_accounts  OAuthAccount[]
  device_tokens   DeviceToken[]
  email_verifications EmailVerification[]

  @@map("users")
  @@index([email])
  @@index([account_status])
  @@index([created_at])
}

model UserSession {
  id                String    @id @default(uuid())
  user_id           String
  token_hash        String    @unique
  refresh_token_hash String?  @unique
  device_info       Json      @default("{}")
  ip_address        String?
  user_agent        String?
  location_data     Json      @default("{}")
  session_duration_minutes Int?
  pages_visited     Json      @default("[]")
  actions_count     Int       @default(0)
  started_at        DateTime  @default(now())
  ended_at          DateTime?
  expires_at        DateTime
  is_active         Boolean   @default(true)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relación
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_sessions")
  @@index([user_id])
  @@index([token_hash])
  @@index([is_active])
  @@index([expires_at])
}

model ParentalConsent {
  id              String    @id @default(uuid())
  minor_user_id   String
  parent_email    String
  parent_name     String
  relationship    String
  consent_token   String    @unique
  is_approved     Boolean   @default(false)
  approved_at     DateTime?
  expires_at      DateTime
  ip_address      String?
  user_agent      String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Relación
  minor_user      User      @relation(fields: [minor_user_id], references: [id], onDelete: Cascade)

  @@map("parental_consents")
  @@index([minor_user_id])
  @@index([consent_token])
  @@index([is_approved])
  @@index([expires_at])
}

model EmailVerification {
  id                 String    @id @default(uuid())
  user_id            String
  email              String
  verification_token String    @unique
  expires_at         DateTime
  is_used            Boolean   @default(false)
  used_at            DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  // Relación
  user               User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("email_verifications")
  @@index([user_id])
  @@index([verification_token])
  @@index([email])
  @@index([is_used])
  @@index([expires_at])
}

model PasswordReset {
  id          String    @id @default(uuid())
  user_id     String
  token       String    @unique
  expires_at  DateTime
  is_used     Boolean   @default(false)
  used_at     DateTime?
  created_at  DateTime  @default(now())

  // Relación
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("password_resets")
  @@index([user_id])
  @@index([token])
  @@index([expires_at])
}

model OAuthAccount {
  id                String    @id @default(uuid())
  user_id           String
  provider          String    // google, facebook
  provider_user_id  String
  access_token      String?
  refresh_token     String?
  expires_at        DateTime?
  created_at        DateTime  @default(now())

  // Relación
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_user_id])
  @@map("oauth_accounts")
  @@index([user_id])
  @@index([provider])
}


model DeviceToken {
  id            String    @id @default(uuid())
  user_id       String
  token         String    @unique
  platform      String    // ios, android, web
  app_version   String?
  device_model  String?
  os_version    String?
  is_active     Boolean   @default(true)
  last_used_at  DateTime  @default(now())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relación
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("device_tokens")
  @@index([user_id])
  @@index([token])
  @@index([is_active])
}